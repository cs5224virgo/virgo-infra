AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Baseline VPC

  Creates a Virtual Private Cloud (VPC) network suitable for hosting
  deployments of the cloud environment stack.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC configuration
        Parameters:
          - SubnetAz1
          - SubnetAz2

    ParameterLabels:
      SubnetAz1:
        default: Subnet availability zone 1 (Mandatory)
      SubnetAz2:
        default: Subnet availability zone 2 (Mandatory)

Parameters:

  SubnetAz1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: |
      The first availability zone in which subnets will be created.
    ConstraintDescription: |
      Provide a valid availability zone within the AWS region.

  SubnetAz2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: |
      The second availability zone in which subnets will be created.
    ConstraintDescription: |
      Provide a valid availability zone within the AWS region.

Rules:
  ValidVpcSubnetAzs:
    Assertions:
      - Assert: !Not [ !Equals [ !Ref SubnetAz1, !Ref SubnetAz2 ]]

Resources:

  RgGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: virgo-vpc
      Description: Affinda Cloud VPC
      Tags:
        - Key: Name
          Value: virgo-vpc-rg

  ###################################
  ### Virtual Private Cloud (VPC) ###
  ###################################

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/22
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: virgo-vpc

  #########################
  ### VPC: Network ACLs ###
  #########################

  # We can retrieve the ID of the default network ACL which is created with the
  # VPC, but can't modify its tags as CloudFormation didn't directly create it.
  # The network ACL also includes two default entries which allow all ingress
  # and egress traffic respectively, both with rule number 100, but we can't
  # modify them either for the same reason.
  #
  # Instead we'll install two new entries with a lower rule number (i.e. higher
  # priority) which deny all ingress and egress traffic. This will force all
  # subnets to use a separate explicitly defined network ACL.

  VpcNetworkAclEntryDefaultIngressBlock:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl
      Egress: false
      RuleNumber: 10
      Protocol: -1 # All protocols
      CidrBlock: 0.0.0.0/0
      RuleAction: deny

  VpcNetworkAclEntryDefaultEgressBlock:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl
      Egress: true
      RuleNumber: 10
      Protocol: -1 # All protocols
      CidrBlock: 0.0.0.0/0
      RuleAction: deny

  # defining our own network ACL

  VpcNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: virgo-acl

  VpcNetworkAclEntryIngressAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !GetAtt VpcNetworkAcl.Id
      Egress: false
      RuleNumber: 100
      Protocol: -1 # All protocols
      CidrBlock: 0.0.0.0/0
      RuleAction: allow

  VpcNetworkAclEntryEgressAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !GetAtt VpcNetworkAcl.Id
      Egress: true
      RuleNumber: 100
      Protocol: -1 # All protocols
      CidrBlock: 0.0.0.0/0
      RuleAction: allow

  #########################
  ### VPC: Route Tables ###
  #########################

  # There's seemingly no mechanism to retrieve the default route table which is
  # created with the VPC. As such, we create our own and leave the default one
  # untouched. Unfortunately, this also means updating the tags on the default
  # route table isn't possible.
  VpcRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: virgo-igw-rtb

  ####################
  ### VPC: Subnets ###
  ####################

  VpcSubnetVpcAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.20.0.0/24
      AvailabilityZone: !Ref SubnetAz1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: virgo-vpc-az1-subnet

  VpcSubnetNetworkAclAssociationVpcAz1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref VpcSubnetVpcAz1
      NetworkAclId: !GetAtt VpcNetworkAcl.Id

  VpcSubnetRouteTableAssociationVpcAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetVpcAz1
      RouteTableId: !Ref VpcRouteTable

  VpcSubnetVpcAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.20.1.0/24
      AvailabilityZone: !Ref SubnetAz2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: virgo-vpc-az2-subnet

  VpcSubnetNetworkAclAssociationVpcAz2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref VpcSubnetVpcAz2
      NetworkAclId: !GetAtt VpcNetworkAcl.Id

  VpcSubnetRouteTableAssociationVpcAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetVpcAz2
      RouteTableId: !Ref VpcRouteTable

  ############################
  ### VPC: Security Groups ###
  ############################

  # The default security group created with the VPC has a similar set of issues
  # as the default network ACL. We can't tag it, it allows all ingress traffic
  # sourced from members of the security group, and allows all egress traffic
  # to any destination. That last one is particularly problematic, and is the
  # only one we can fix on the group itself within the CloudFormation stack.
  #
  # The egress rule is actually a default which exists on any security group
  # which has no explicit egress rules. The ideal solution would be to simply
  # remove it outright, leaving no egress rules, resulting in egress traffic
  # being blocked due to the default deny behaviour. Unfortunately, we can't do
  # this within the constraints of CloudFormation. Instead, we'll add a rule
  # that only allows traffic from the loopback interface, which results in the
  # same behaviour given the address is non-routable.
  VpcSecurityGroupEgressDefaultBlock:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc.DefaultSecurityGroup
      Description: Block all
      CidrIp: 127.0.0.1/32 
      IpProtocol: -1 # All protocols

  # defining our own SG
  VpcSecurityGroupDefault:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: virgo-default-sg

  VpcSecurityGroupIngressMembers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VpcSecurityGroupDefault
      Description: Security group members
      SourceSecurityGroupId: !Ref VpcSecurityGroupDefault
      IpProtocol: -1 # All protocols

  VpcSecurityGroupEgressAny:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VpcSecurityGroupDefault
      Description: Allow all
      CidrIp: 0.0.0.0/0
      IpProtocol: -1 # All protocols
  
  VpcSecurityGroupIcmp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ICMP
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: Echo request
          IpProtocol: icmp
          FromPort: 8 # Echo
          ToPort: 0 # No code
          CidrIp: 0.0.0.0/0
        - Description: Port unreachable
          IpProtocol: icmp
          FromPort: 3 # Destination Unreachable
          ToPort: 3 # Port Unreachable
          CidrIp: 0.0.0.0/0
        - Description: TTL exceeded
          IpProtocol: icmp
          FromPort: 11 # Time Exceeded
          ToPort: 0 # Time to Live exceeded in Transit
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: virgo-icmp-sg
      
  VpcSecurityGroupSsh:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: Trusted management IPs
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: virgo-ssh-sg

  #############################
  ### VPC: Internet Gateway ###
  #############################

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: virgo-igw

  VpcGatewayAttachmentInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !GetAtt VpcInternetGateway.InternetGatewayId

  VpcRouteInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt VpcInternetGateway.InternetGatewayId

  ####################
  ### EC2 Instance ###
  ####################

  Ec2KeyPairVirgoChat:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: virgo-virgochat-keypair
      KeyType: ed25519
      Tags:
        - Key: Name
          Value: virgo-virgochat-keypair

  VpcSecurityGroupEc2VirgoChat:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Virgo Chat EC2
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: Allow incoming SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: Exposing k8s api server
          IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 0.0.0.0/0
        - Description: Exposing port 80 HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Exposing port 30001 WebSocket
          IpProtocol: tcp
          FromPort: 30001
          ToPort: 30001
          CidrIp: 0.0.0.0/0
        - Description: Exposing port 30001 WebSocket
          IpProtocol: udp
          FromPort: 30001
          ToPort: 30001
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound
          CidrIp: 0.0.0.0/0
          IpProtocol: -1 # All protocols
      Tags:
        - Key: Name
          Value: virgo-virgochat-sg

  Ec2InstanceVirgoChat:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref Ec2KeyPairVirgoChat
      ImageId: ami-06c4be2792f419b7b
      Tags:
        - Key: Name
          Value: virgo-virgochat-instance
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref VpcSecurityGroupEc2VirgoChat
          SubnetId: !Ref VpcSubnetVpcAz1

  ####################
  ### RDS Instance ###
  ####################

  RdsDbParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Custom parameters for main RDS DB
      Family: postgres16
      Parameters:
        rds.force_ssl: false
      Tags:
        - Key: Name
          Value: virgo-rdspg

  RdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: virgo-rdssg
      DBSubnetGroupDescription: RDS subnet group for virgo-db
      SubnetIds:
        - !Ref VpcSubnetVpcAz1
        - !Ref VpcSubnetVpcAz2
      Tags:
        - Key: Name
          Value: virgo-rdssg

  VpcSecurityGroupRds:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS servers
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: EC2 instance can access the database
          SourceSecurityGroupId: !Ref VpcSecurityGroupEc2VirgoChat
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
      Tags:
        - Key: Name
          Value: virgo-rds-sg

  SecretRdsMasterUserPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: The password for RDS Master user
      Name: virgo-db-masteruser-secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "virgo"}'
        GenerateStringKey: password
        ExcludeCharacters: |
          !"#$%&'()+,-./:;<=>?@[\]^_`{|}~@
        RequireEachIncludedType: true
        PasswordLength: 32

  RdsDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Snapshot
    Properties:
    # Database
      Engine: postgres
      EngineVersion: "16.1"
      Port: '5432'
      DBName: virgo
      DBInstanceIdentifier: virgo-rds-db
      DBParameterGroupName: !Ref RdsDbParameterGroup

    # Compute (EC2)
      DBInstanceClass: "db.t3.micro"
      DeletionProtection: false
      MultiAZ: false
      #AvailabilityZone:

    # Storage (EBS)
      StorageType: gp2
      AllocatedStorage: "10" # need to be string
      MaxAllocatedStorage: 15 # GiB
      #Iops:
      StorageEncrypted: true
      #KmsKeyId:

    # Network (VPC)
      DBSubnetGroupName: !Ref RdsDBSubnetGroup
      VPCSecurityGroups:
        - !Ref VpcSecurityGroupRds
      PubliclyAccessible: false

    # Security
      #AssociatedRoles:
      CACertificateIdentifier: rds-ca-rsa2048-g1
      #Domain:
      #DomainIAMRoleName:

    # Authentication
      MasterUsername: !Sub "{{resolve:secretsmanager:${SecretRdsMasterUserPassword}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${SecretRdsMasterUserPassword}::password}}"
      EnableIAMDatabaseAuthentication: false

    # Backups
      BackupRetentionPeriod: 0
      DeleteAutomatedBackups: true
      #PreferredBackupWindow:

    # Performance Insights
      EnablePerformanceInsights: false

      Tags:
        - Key: Name
          Value: virgo-rds-db

Outputs:
  VpcRouteTableId:
    Description: Route table ID
    Value: !Ref VpcRouteTable

  VpcSgIcmpId:
    Description: 'Security group ID: ICMP'
    Value: !Ref VpcSecurityGroupIcmp

  VpcSgSshId:
    Description: 'Security group ID: SSH'
    Value: !Ref VpcSecurityGroupSsh

  VirgoChatPublicIp:
    Description: EC2 instance public IP
    Value: !GetAtt Ec2InstanceVirgoChat.PublicIp

  VirgoChatPrivateIp:
    Description: EC2 instance private IP
    Value: !GetAtt Ec2InstanceVirgoChat.PrivateIp

  VirgoDbEndpointAddress:
    Description: Endpoint address of the rds instance
    Value: !GetAtt RdsDBInstance.Endpoint.Address
